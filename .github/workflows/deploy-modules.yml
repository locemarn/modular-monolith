name: Deploy Modules

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      user-service: ${{ steps.changes.outputs.user-service }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'apps/api-gateway/**'
              - 'apps/shared/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            user-service:
              - 'apps/user-service/**'
              - 'apps/shared/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            shared:
              - 'apps/shared/**'

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-gateway == 'true' || needs.detect-changes.outputs.user-service == 'true'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: test_user
          RABBITMQ_DEFAULT_PASS: test_password
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5673:5672
          - 15673:15672

    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run lint
        run: pnpm biome check .
        
      - name: Run type check
        run: pnpm run check:strict
        
      - name: Run unit and integration tests
        run: pnpm test
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5433
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          RABBITMQ_URL: amqp://test_user:test_password@localhost:5673

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5433
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          RABBITMQ_URL: amqp://test_user:test_password@localhost:5673

  build-api-gateway:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.api-gateway == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api-gateway/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-user-service:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.user-service == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/user-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-api-gateway:
    runs-on: ubuntu-latest
    needs: [build-api-gateway]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
      
      - name: Create/Update Kubernetes secrets
        run: |
          kubectl create secret generic api-gateway-secrets \
            --from-literal=DATABASE_URL=${{ secrets.PROD_DATABASE_URL }} \
            --from-literal=RABBITMQ_URL=${{ secrets.PROD_RABBITMQ_URL }} \
            --from-literal=JWT_SECRET=${{ secrets.PROD_JWT_SECRET }} \
            --from-literal=JWT_EXPIRES_IN=${{ secrets.PROD_JWT_EXPIRES_IN }} \
            --from-literal=NODE_ENV=production \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying API Gateway to Kubernetes"
          kubectl apply -f apps/api-gateway/k8s/
          kubectl set image deployment/api-gateway \
            api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }} \
            --record
          kubectl rollout status deployment/api-gateway --timeout=5m
          
      - name: Verify deployment
        run: |
          kubectl get pods -l app=api-gateway
          kubectl get svc api-gateway

  deploy-user-service:
    runs-on: ubuntu-latest
    needs: [build-user-service]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
      
      - name: Create/Update Kubernetes secrets
        run: |
          kubectl create secret generic user-service-secrets \
            --from-literal=DATABASE_URL=${{ secrets.PROD_DATABASE_URL }} \
            --from-literal=RABBITMQ_URL=${{ secrets.PROD_RABBITMQ_URL }} \
            --from-literal=JWT_SECRET=${{ secrets.PROD_JWT_SECRET }} \
            --from-literal=JWT_EXPIRES_IN=${{ secrets.PROD_JWT_EXPIRES_IN }} \
            --from-literal=NODE_ENV=production \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying User Service to Kubernetes"
          kubectl apply -f apps/user-service/k8s/
          kubectl set image deployment/user-service \
            user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ github.sha }} \
            --record
          kubectl rollout status deployment/user-service --timeout=5m
          
      - name: Verify deployment
        run: |
          kubectl get pods -l app=user-service
          kubectl get svc user-service

  notify-deployment:
  runs-on: ubuntu-latest
  needs: [deploy-api-gateway, deploy-user-service]
  if: |
    always() && 
    github.ref == 'refs/heads/main' &&
    (needs.deploy-api-gateway.result != 'skipped' || needs.deploy-user-service.result != 'skipped')
  
  steps:
    - name: Deployment notification
      run: |
        API_RESULT="${{ needs.deploy-api-gateway.result }}"
        USER_RESULT="${{ needs.deploy-user-service.result }}"
        
        echo "API Gateway deployment: $API_RESULT"
        echo "User Service deployment: $USER_RESULT"
        
        if [ "$API_RESULT" == "success" ] || [ "$API_RESULT" == "skipped" ]; then
          if [ "$USER_RESULT" == "success" ] || [ "$USER_RESULT" == "skipped" ]; then
            echo "✅ Deployment completed successfully!"
            exit 0
          fi
        fi
        
        echo "❌ Some deployments failed. Check the logs above."
        exit 1